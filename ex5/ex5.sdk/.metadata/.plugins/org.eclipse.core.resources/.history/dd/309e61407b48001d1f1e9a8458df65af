#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
#include "XScuTimer.h"
#include "matrix_ip.h"
#include "time.h"

#define ONE_SECOND 325000000 // half of the CPU clock speed
#define MSIZE 4
//====================================================

typedef union {
	unsigned char comp[MSIZE];
	unsigned int vect;
} vectorType;

typedef vectorType VectorArray[MSIZE];

void setInputMatrices(VectorArray *, VectorArray*);
void displayMatrix(VectorArray*);
void multiMatrixSoft(VectorArray*, VectorArray*, VectorArray*);
void mult(VectorArray*, VectorArray*, VectorArray*);
void multiMatrixHard(VectorArray*, VectorArray*, VectorArray*);

/* 1: create 3 global variables of type VectorArray */
VectorArray pInst[MSIZE];
VectorArray aInst[MSIZE];
VectorArray bInst[MSIZE];

/* 2: Implement a function called setInputMatrices that fills out the data structures */
void setInputMatrices(VectorArray *A, VectorArray *B) {
	int cnt = 1;
	for (int i = 0; i < MSIZE; i++) {
		for (int j = 0; j < MSIZE; j++) {
			A[i]->comp[j] = cnt;
			B[i]->comp[j] = i + 1;
			cnt++;
		}
	}
}

/* 3: Implement a function called displayMatrix that displays a 4x4 matrix via the USB-UART interface */
void displayMatrix(VectorArray* input) {
	for (int i = 0; i < MSIZE; i++) {
		for (int j = 0; j < MSIZE; j++) {
			xil_printf("%d ", input[i]->comp[j]);
		}
		xil_printf("\n");
	}
	xil_printf("\n");
}

/* 4: Implement a function called multiMatrixSoft that computes the 4x4 matrix product of the expr: P = A.B^T */
void multiMatrixSoft(VectorArray *A, VectorArray* B, VectorArray* P) {
	for (int i = 0; i < MSIZE; i++) {
		for (int j = 0; j < MSIZE; j++) {
			int p0 = A[i]->comp[0] * B[i + j]->comp[0];
			int p1 = A[i]->comp[1] * B[i + j]->comp[1];
			int p2 = A[i]->comp[2] * B[i + j]->comp[2];
			int p3 = A[i]->comp[3] * B[i + j]->comp[3];
			int p_ij = p0 + p1 + p2 + p3;
			P[i]->comp[j] = p_ij;
		}
	}
}

/* 5: Add a command called mult that multiplies AInst and BTinst matrices with the values
 above. Display the result P and the execution time (in clock ticks) of the function
 multiMatrixSoft in the USB UART windowS */
void mult(VectorArray* A, VectorArray* B, VectorArray* P) {
	for (int i = 0; i < MSIZE; i++) {
		for (int j = 0; j < MSIZE; j++) {
			int p0 = A[i]->comp[0];
			int p1 = A[i]->comp[1];
			int p2 = A[i]->comp[2];
			int p3 = A[i]->comp[3];
			int p_ij = (p0 + p1 + p2 + p3) * B[i + j]->comp[0];
			P[i]->comp[j] = p_ij;
		}
	}
}

int main(void) {
	XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
	XGpio dip, push;
	int dip_check, my_counter;

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	s32 Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
			ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}

	// Load timer with delay in multiple of ONE_SECOND
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_SECOND);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);

	xil_printf("-- Start of the Program --\r\n");

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&push, 1, 0xffffffff);

	while (1) {
		xil_printf("Enter choice: 1 (SW LEDS), 2 (Timer LEDS).\n\rCMD:> ");
		/* Read an input value from the console. */
		int value = inbyte();
		inbyte(); //CR
		inbyte(); //LF (Skip this line using PuTTY terminal)
		switch (value) {
		case '1':
//			psb_check = XGpio_DiscreteRead(&push, 1);
//			xil_printf("Push Buttons Status %x\r\n", psb_check);
			dip_check = XGpio_DiscreteRead(&dip, 1);
			xil_printf("DIP Switch Status %x\r\n", dip_check);

			// output dip switches value on LED_ip device
			LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, dip_check);
//			for (i = 0; i < 9999999; i++)
//				;
			break;
		case '2':

			// Check timer expired
			if (XScuTimer_IsExpired(TimerInstancePtr)) {
				// clear status bit
				XScuTimer_ClearInterruptStatus(TimerInstancePtr);
				my_counter++;
				my_counter %= 16;
				LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, my_counter);
			}
			break;
		case '3':

			/* 2 */
			setInputMatrices(aInst, bInst);

			/* 3 */
			displayMatrix(aInst);
			displayMatrix(bInst);

			/* 4 */
			multiMatrixSoft(aInst, bInst, pInst);
			displayMatrix(pInst);

			/* 5 */
			multiMatrixSoft(aInst, bInst, pInst);
			displayMatrix(pInst);
			break;
//		case '4':
//			for (int row = 0; row < 4; ++row) {
//				for (int col = 0; col < 4; ++col) {
//					Xil_Out32(
//							XPAR_MATRIX_IP_0_S_AXI_BASEADDR
//									+ MATRIX_IP_S_AXI_SLV_REG0_OFFSET,
//							A[row].vect);
//					Xil_Out32(
//							XPAR_MATRIX_IP_0_S_AXI_BASEADDR
//									+ MATRIX_IP_S_AXI_SLV_REG1_OFFSET,
//							B[col].vect);
//					P[row].comp[col] = Xil_In32(
//							XPAR_MATRIX_IP_0_S_AXI_BASEADDR
//									+ MATRIX_IP_S_AXI_SLV_REG2_OFFSET);
//
//				}
//			}
//			break;
		default:
			break;
		}

	}
	// Stop the timer
	XScuTimer_Stop(TimerInstancePtr);
}
