#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
#include "XScuTimer.h"
#include "matrix_ip.h"
#include "time.h"

#define ONE_SECOND 325000000 // half of the CPU clock speed
#define MSIZE 4
//====================================================

typedef union {
	unsigned char comp[MSIZE];
	unsigned int vect;
} vectorType;

typedef vectorType VectorArray[MSIZE];

void setInputMatrices(VectorArray A, VectorArray B);
void displayMatrix(VectorArray input);
void multiMatrixSoft(VectorArray A, VectorArray B, VectorArray P);
void multiMatrixHard(VectorArray A, VectorArray B, VectorArray P);
void clearMatrix(VectorArray A);

/* 1: create 3 global variables of type VectorArray */
VectorArray A;
VectorArray B;
VectorArray P;


/* 2: Implement a function called setInputMatrices that fills out the data structures */
void setInputMatrices(VectorArray A, VectorArray B) {
	int i, j, counter = 1;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			A[i].comp[j] = counter;
			counter++;
			B[i].comp[j] = i + 1;
		}
	}

}

void clearMatrix(VectorArray A){
	for(int i = 0; i< 4; ++i){
		A[i].vect = 0;
	}
}

/* 3: Implement a function called displayMatrix that displays a 4x4 matrix via the USB-UART interface */
void displayMatrix(VectorArray input) {
	int i, j, counter = 1;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			xil_printf("%d ", input[i].comp[j]);
		}
		xil_printf("\r\n");
	}
	xil_printf("\r\n");
}

/* 4: Implement a function called multiMatrixSoft that computes the 4x4 matrix product of the expr: P = A.B^T */
void multiMatrixSoft(VectorArray A, VectorArray B, VectorArray P) {
	//tRANSPOSE OF THE B
	int i, j, transpose[4][4], k;
	for (i = 0; i < MSIZE; ++i)
		for (j = 0; j < MSIZE; ++j) {
			transpose[j][i] = B[i].comp[j];
		}

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {

			for (k = 0; k < 4; k++) {
				P[i].comp[j] += A[i].comp[k] * transpose[k][j];
			}
		}
	}
}

/* 5: Add a command called mult that multiplies AInst and BTinst matrices with the values
 above. Display the result P and the execution time (in clock ticks) of the function
 multiMatrixSoft in the USB UART windowS */

void multiMatrixHard(VectorArray A, VectorArray B, VectorArray P) {
	//tRANSPOSE OF THE B
	int i, j, transpose[4][4], k;
	for (i = 0; i < MSIZE; ++i)
		for (j = 0; j < MSIZE; ++j) {
			transpose[j][i] = B[i].comp[j];
		}

	for (int row = 0; row < 4; row++) {
		for (int col = 0; col < 4; col++) {

			Xil_Out32(
			XPAR_MATRIX_IP_S00_AXI_BASEADDR + MATRIX_IP_S00_AXI_SLV_REG0_OFFSET,
					A[row].vect);
			Xil_Out32(
			XPAR_MATRIX_IP_S00_AXI_BASEADDR + MATRIX_IP_S00_AXI_SLV_REG1_OFFSET,
					B[col].vect);
			P[row].comp[col] = Xil_In32(
					XPAR_MATRIX_IP_S00_AXI_BASEADDR
							+ MATRIX_IP_S00_AXI_SLV_REG2_OFFSET);
		}
	}
}
int main(void) {
	XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
	XGpio dip, push;
	int dip_check, my_counter;

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	s32 Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
			ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}

	// Load timer with delay in multiple of ONE_SECOND
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_SECOND);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);

	xil_printf("-- Start of the Program --\r\n");

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&push, 1, 0xffffffff);

	while (1) {
		xil_printf("Enter choice: 1 (SW LEDS), 2 (Timer LEDS).\n\rCMD:> ");
		/* Read an input value from the console. */
		int value = inbyte();
		inbyte(); //CR
//		inbyte(); //LF (Skip this line using PuTTY terminal)
		switch (value) {
		case '1':
//			psb_check = XGpio_DiscreteRead(&push, 1);
//			xil_printf("Push Buttons Status %x\r\n", psb_check);
			dip_check = XGpio_DiscreteRead(&dip, 1);
			xil_printf("DIP Switch Status %x\r\n", dip_check);

			// output dip switches value on LED_ip device
			LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, dip_check);
//			for (i = 0; i < 9999999; i++)
//				;
			break;
		case '2':

			// Check timer expired
			if (XScuTimer_IsExpired(TimerInstancePtr)) {
				// clear status bit
				XScuTimer_ClearInterruptStatus(TimerInstancePtr);
				my_counter++;
				my_counter %= 16;
				LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, my_counter);
			}
			break;
		case '3':
			clearMatrix(A);
			clearMatrix(B);
			clearMatrix(P);
			setInputMatrices(A, B);
			displayMatrix(A);
			displayMatrix(B);
			multiMatrixSoft(A, B, P);
			displayMatrix(P);
			break;
		case '4':
			clearMatrix(A);
			clearMatrix(B);
			clearMatrix(P);
			setInputMatrices(A, B);
			displayMatrix(A);
			displayMatrix(B);
			unsigned int start, end;
			start = XScuTimer_GetCounterValue(TimerInstancePtr);
			multiMatrixHard(A, B, P);
			end = XScuTimer_GetCounterValue(TimerInstancePtr);
			displayMatrix(P);

		    xil_printf("HARDWARE: time taken by CPU: %u\r\n", end-start);
			break;
		default:
			break;
		}

	}
	// Stop the timer
	XScuTimer_Stop(TimerInstancePtr);
}
